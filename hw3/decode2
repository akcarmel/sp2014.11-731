#!/usr/bin/env python
import argparse
import sys
import models
import heapq
from collections import namedtuple
import itertools
import math

parser = argparse.ArgumentParser(description='Simple phrase based decoder.')
parser.add_argument('-i', '--input', dest='input', default='data/input', help='File containing sentences to translate (default=data/input)')
parser.add_argument('-t', '--translation-model', dest='tm', default='data/tm', help='File containing translation model (default=data/tm)')
parser.add_argument('-s', '--stack-size', dest='s', default=1, type=int, help='Maximum stack size (default=1)')
parser.add_argument('-k', '--divide-permute', dest='k', default=2, type=int, help='dividing permuting sizes')
parser.add_argument('-n', '--num_sentences', dest='num_sents', default=sys.maxint, type=int, help='Number of sentences to decode (default=no limit)')
parser.add_argument('-l', '--language-model', dest='lm', default='data/lm', help='File containing ARPA-format language model (default=data/lm)')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', default=False,  help='Verbose mode (default=off)')
opts = parser.parse_args()

tm = models.TM(opts.tm, sys.maxint)
lm = models.LM(opts.lm)
sys.stderr.write('Decoding %s...\n' % (opts.input,))
input_sents = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

hypothesis = namedtuple('hypothesis', 'logprob, lm_state, predecessor, phrase')
def future_cost_estimation(partial_string):
    fc={}
    if partial_string in tm:
        for given_phrase in tm[partial_string]:
            logprob=given_phrase.logprob
            lm_state = lm.begin()
            for word in given_phrase:
                (lm_state, word_logprob) = lm.score(lm_state, word)
                logprob += word_logprob
        fc[given_phrase]=logprob
    return fc
def all_future_cost_estimation(f):
    l=len(f)
    all_fc={}
    for i in xrange(l):
        for j in xrange(i+1,l):
            fc=future_cost_estimation(f[i:j])
            min_c=100000000
            for p,c in fc.iteritems():
                #all_fc[(i,j)]=fc
                if c < min_c:
                   min_c=c
            all_fc[(i,j)]=min_c
    return all_fc
    
def logadd(x,y):
    return x + math.log(1 + math.exp(y-x)) if y < x else y + math.log(1 + math.exp(x-y))
def coverage(sequence):
    return reduce(lambda x,y: x|y, map(lambda i: long(1) << i, sequence), 0)
def make_permutations(partial_string_orig):
    partial_strings=list(itertools.permutations(list(partial_string_orig)))
    return partial_strings

def merge_two_permutations(p1,p2):
    two_merge=[]
    for j,t1 in enumerate(p1):
        for k,t2 in enumerate(p2):
            l1=list(t1)
            l2=list(t2)
            l1.extend(l2)
            two_merge.append(tuple(l1)) 
    return two_merge

def merge_permutations(p):
    pkeys=sorted(p.keys()) 
    last_key=pkeys[len(pkeys)-1]
    first_key=pkeys[0]
    two_merge=p[first_key]
    for i in range(first_key+1,last_key+1):
        two_merge=merge_two_permutations(two_merge,p[i])
    #print len(two_merge)
    return two_merge

            

def divide_and_make_permutations(partial_string_orig,k):
    length_of_string=len(partial_string_orig)
    if length_of_string <= k:
        return make_permutations(partial_string_orig)
    quotient=length_of_string/k
    remained=length_of_string%k
    quo_wise_permutations={}
    #print quotient,remained
    for i in range(quotient):
        quo_wise_permutations[i]=make_permutations(partial_string_orig[i*k:(i+1)*k])

    quo_wise_permutations[quotient]=make_permutations(partial_string_orig[quotient*k:])
    #print "quo wise",quo_wise_permutations
    all_permutations=merge_permutations(quo_wise_permutations)
    return all_permutations

def language_model_score(sent):
    l=len(sent)
    logprob=0.0
    for i in range(l-2):
        lm_state = lm.begin()
        for word in phrase.english.split():
            (lm_state, word_logprob) = lm.score(lm_state, word)
            logprob += word_logprob
    return logprob

def translation_score(perm,all_tms):
    l=len(perm)
    tms=0.0

    for i in range(0,l,3):
        tphrase=perm[i:i+3]
        if tphrase in all_tms:
            tms+=all_tms[tphrase]
        elif tphrase[:2] in all_tms and tphrase[2] in all_tms:
            tms+=all_tms[tphrase[:2]]
            tms+=all_tms[tphrase[2]]
        elif tphrase[1:] in all_tms and tphrase[0] in all_tms:
            tms+=all_tms[tphrase[1:]]
            tms+=all_tms[tphrase[0]]
        else:
            return -10000000.0
    return tms
        


def get_all_scores(perms,input_sent):
    all_perms=[(input_sent,e) for e in perms]
    all_scores={}
    for pair in all_perms:
        total_logprob = 0.0
        f=pair[0]
        e=pair[1]
        # compute p(e) under the LM
        lm_state = lm.begin()
        lm_logprob = 0.0
        for word in e + ("</s>",):
            (lm_state, word_logprob) = lm.score(lm_state, word)
            lm_logprob += word_logprob
        total_logprob += lm_logprob
        # alignments[i] is a list of all the phrases in f that could have
        # generated phrases starting at position i in e
        alignments = [[] for _ in e]
        for fi in xrange(len(f)):
            for fj in xrange(fi+1,len(f)+1):
                if f[fi:fj] in tm:
                    for phrase in tm[f[fi:fj]]:
                        ephrase = tuple(phrase.english.split())
                        for ei in xrange(len(e)+1-len(ephrase)):
                            ej = ei+len(ephrase)
                            if ephrase == e[ei:ej]:
                                alignments[ei].append((ej, phrase.logprob, fi, fj))

        chart = [{} for _ in e] + [{}]
        chart[0][0] = 0.0
        for ei, sums in enumerate(chart[:-1]):
            for v in sums:
                for ej, logprob, fi, fj in alignments[ei]:
                    if coverage(range(fi,fj)) & v == 0:
                        new_v = coverage(range(fi,fj)) | v
                        if new_v in chart[ej]:
                            chart[ej][new_v] = logadd(chart[ej][new_v], sums[v]+logprob)
                        else:
                            chart[ej][new_v] = sums[v]+logprob
        goal = coverage(range(len(f)))
        if goal in chart[len(e)]:
           total_logprob += chart[len(e)][goal]
           all_scores[e]=total_logprob
        else:
            all_scores[e]=-10000000.0
    return all_scores


        
def get_all_tms(f):
    all_tms={}
    for i in range(len(f)):
        for j in range(len(f)):
            if f[i:j] in tm:
                for phrase in tm[f[i:j]]:
                    all_tms[phrase.english]=phrase.logprob
    return all_tms

def hill_climb(perms,f):
    scores={}
    all_tms=get_all_tms(f)
    for perm in perms:
        lmscore=language_model_score(perm)
        #TODO TM SCORE
        tmscore=translation_score(perm,all_tms)
        scores[perm]=lmscore+tmscore
    return scores

counter=0
for f in input_sents:
    # The following code implements a DP monotone decoding
    # algorithm (one that doesn't permute the target phrases).
    # Hence all hypotheses in stacks[i] represent translations of 
    # the first i words of the input sentence.
    # HINT: Generalize this so that stacks[i] contains translations
    # of any i words (remember to keep track of which words those
    # are, and to estimate future costs)
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None)
    counter+=1
    sys.stderr.write("current sentence %d\n" % (counter,))
    stacks = [{} for _ in f] + [{}]
    stacks[0][lm.begin()] = initial_hypothesis
    all_fc=all_future_cost_estimation(f)
    for i, stack in enumerate(stacks[:-1]):
        # extend the top s hypotheses in the current stack
        for h in heapq.nlargest(opts.s, stack.itervalues(), key=lambda h: h.logprob): # prune
            for j in xrange(i+1,len(f)+1):
                if f[i:j] in tm:
                    for phrase in tm[f[i:j]]:
                        logprob = h.logprob + phrase.logprob
                        lm_state = h.lm_state
                        print lm_state
                        for word in phrase.english.split():
                            (lm_state, word_logprob) = lm.score(lm_state, word)
                            logprob += word_logprob
                        logprob += lm.end(lm_state) if j == len(f) else 0.0
                        if j < len(f)-1:
                           logprob = logprob+all_fc[(j,len(f)-1)] - all_fc[(0,j)]
                        new_hypothesis = hypothesis(logprob, lm_state, h, phrase)
                        if lm_state not in stacks[j] or stacks[j][lm_state].logprob < logprob: # second case is recombination
                            stacks[j][lm_state] = new_hypothesis 

    # find best translation by looking at the best scoring hypothesis
    # on the last stack
    winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
    #print "winner",winner
    def extract_english_recursive(h):
        return '' if h.predecessor is None else '%s%s ' % (extract_english_recursive(h.predecessor), h.phrase.english)
    string=extract_english_recursive(winner)
    allperms=divide_and_make_permutations(string.split(),opts.k)
    #print "all perms are",len(allperms)
    #scores=hill_climb(allperms,f)
    scores=get_all_scores(allperms,f)
    sys.stderr.write('Number of perms %d\n'% (len(allperms)))
    #print scores
    winner=max(scores.iteritems(),key=lambda x: x[1])[0]
    #print counter
    #print string
    print " ".join(winner)
    #print winner

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write('LM = %f, TM = %f, Total = %f\n' % 
            (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
